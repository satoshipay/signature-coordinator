image: node:10

variables:
  DOCKER_HUB_IMAGE: satoshipay/multisig-coordinator
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  CI_APPLICATION_REPOSITORY: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}
  INGRESS_CLASS: auxiliary

stages:
  - setup
  - test
  - build
  - publish
  - staging
  - production

prepare:
  stage: setup
  variables:
    npm_config_cache: $CI_PROJECT_DIR/cache
  cache:
    key: npm-${CI_COMMIT_REF_SLUG}
    paths:
      - cache/
  script:
    - npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
    - npm ci
  artifacts:
    paths:
      - node_modules
    expire_in: 1 hour

lint:
  stage: test
  script:
    - npm run prettier
    - npm run lint

test:
  stage: test
  variables:
    POSTGRES_USER: postgres
    POSTGRES_DB: postgres
    POSTGRES_PASSWORD: postgres
  before_script:
    - apt update && apt install -y postgresql-client || true
    - cp test.env .env
    - cat migrations/*.sql | psql "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}"
  services:
   - name: postgres:11.0-alpine
  script:
    - npm run test:ci
  artifacts:
    reports:
      junit: ava.xml

build:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - build
    expire_in: 1 week

publish:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.13.0
    entrypoint: [""]
  script:
    - export branch_or_tag=${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}
    - |
      /kaniko/executor --context ${CI_PROJECT_DIR} --dockerfile ${CI_PROJECT_DIR}/docker/Dockerfile \
        --destination ${CI_APPLICATION_REPOSITORY} \
        --destination ${CI_REGISTRY_IMAGE}:latest

staging:
  stage: staging
  image: registry.satoshipay.tech/infrastructure/docker/helmfile:latest
  dependencies: []
  environment:
    name: staging
    url: https://signature-coordinator.staging.satoshipay.tech
  script:
    - helm_init
    - deploy
  only:
    kubernetes: active
    refs:
      - master

production:
  stage: production
  image: registry.satoshipay.tech/infrastructure/docker/helmfile:latest
  dependencies: []
  variables:
    INGRESS_CLASS: core
  environment:
    name: production
    url: https://multisig.satoshipay.io
  script:
    - helm_init
    - deploy
  when: manual
  only:
    kubernetes: active
    refs:
      - master

before_script:
  - |
    function helm_init () {
      helm init --client-only --skip-refresh
      helm dependency update chart/
      helm dependency build chart/
    }

    function deploy () {
      name="$CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG"

      if [[ -n "$DB_MIGRATE" || -z "$(helm ls -q "^$name$")" ]]; then
        echo "Upgrading with DB migrations"

        helm upgrade --install --wait \
            --set releaseOverride="$CI_ENVIRONMENT_SLUG" \
            --set image.repository="$CI_APPLICATION_REPOSITORY" \
            --set image.tag="$CI_APPLICATION_TAG" \
            --set image.secrets[0].name="gitlab-registry" \
            --set postgresql.postgresqlPassword="$DATABASE_PASSWORD" \
            --set ingress.baseURL="$CI_ENVIRONMENT_URL" \
            --set ingress.annotations.kubernetes\\.io/ingress\\.class=$INGRESS_CLASS \
            --set application.migrate.run="true" \
            --set application.initialising="true" \
            $name \
            chart/

        echo "Redeploying without initialising"
        helm upgrade --wait \
          --reuse-values \
          --set application.migrate.run="false" \
          --set application.initialising="false" \
          $name \
          chart/
      else
        echo "Deploying new release"

        helm upgrade --install --wait \
            --set releaseOverride="$CI_ENVIRONMENT_SLUG" \
            --set image.repository="$CI_APPLICATION_REPOSITORY" \
            --set image.tag="$CI_APPLICATION_TAG" \
            --set postgresql.postgresqlPassword="$DATABASE_PASSWORD" \
            --set image.secrets[0].name="gitlab-registry" \
            --set ingress.baseURL="$CI_ENVIRONMENT_URL" \
            --set ingress.annotations.kubernetes\\.io/ingress\\.class=$INGRESS_CLASS \
            $name \
            chart/
      fi

      kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/$CI_ENVIRONMENT_SLUG"
    }
